1) Datatypes in Javascript:

Ans) 
1. Primitive Data Types:-

-> Number: Represents both integer and floating-point numbers. Example: let num = 10;
-> String: Represents a sequence of characters. Example: let str = "Hello, world!";
-> Boolean: Represents a logical value, either true or false. Example: let isTrue = true;
-> Undefined: Represents a variable that has been declared but not assigned a value. Example: let x;
-> Null: Represents an intentional absence of any value or object. Example: let y = null;
-> Symbol: Represents a unique and immutable value, often used as the key for object properties.

2. Non-Primitive Data Types (Reference Types):-

-> Object: Represents a collection of key-value pairs where values can be of any data type, including other objects. Example: let obj = { name: "John", age: 30 };
-> Array: Represents a collection of elements, indexed by integers. Example: let arr = [1, 2, 3, 4];
-> Function: Represents a reusable block of code that can be called with provided arguments. Functions are also objects in JavaScript. Example: function greet() { return "Hello!"; }
-> Date: Represents a date and time. Example: let now = new Date();
-> RegExp (Regular Expression): Represents a pattern used for matching character combinations in strings. Example: let regex = /hello/g;
-> Map: Represents a collection of key-value pairs with arbitrary keys. Example: let map = new Map();
-> Set: Represents a collection of unique values. Example: let set = new Set();

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Difference between Let and Var in Javascript: 

Ans) 
1) Scope:-
- var variables are function-scoped or globally scoped. This means that they are visible throughout the function or globally if declared outside any function.

- let variables are block-scoped. They are only accessible within the block they are declared in (a block is denoted by curly braces {}). This makes let more predictable 
  and less prone to unintended side effects compared to var.

2) Hoisting:-
- Variables declared with var are hoisted to the top of their function scope or global scope, but they are initialized with undefined. 
This means you can access var variables before they are declared, although their value will be undefined.

- Variables declared with let are hoisted to the top of their block, but they remain uninitialized in the Temporal Dead Zone (TDZ) until their declaration is reached in the code.
Accessing them before their declaration will result in a ReferenceError.

3) Re-declaration:-
- You can redeclare a variable using var within the same scope without any errors. This can sometimes lead to unexpected behavior and bugs.

- You cannot redeclare a variable using let within the same block scope. Attempting to do so will result in a SyntaxError.

4) Initialization:-
- Variables declared with var can be declared without being initialized. They will be initialized with the value undefined by default.

- Variables declared with let must be initialized at the time of declaration. If not initialized, they will be in a "temporal dead zone" until initialized, and referencing them will result in a ReferenceError.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) String Methods in Javascript:

Ans)
1) charAt(index): Returns the character at the specified index in the string.
Code:- const str = 'Hello';
       console.log(str.charAt(0)); // Output: 'H'

2) charCodeAt(index): Returns the Unicode value of the character at the specified index.
Code:- const str = 'Hello';
       console.log(str.charCodeAt(0)); // Output: 72 (Unicode value of 'H')

3) concat(str1, str2, ...): Combines two or more strings and returns a new string.
Code:- const str1 = 'Hello';
       const str2 = 'World';
       console.log(str1.concat(' ', str2)); // Output: 'Hello World'

4) slice(startIndex, endIndex): Extracts a portion of a string and returns it as a new string.
Code:- const str = 'Hello World';
       console.log(str.slice(0, 5)); // Output: 'Hello'

5) trim(): Removes whitespace from both ends of the string.
Code:- const str = '   Hello   ';
       console.log(str.trim()); // Output: 'Hello'




